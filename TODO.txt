

- A way to improve code reuse
	* object with functions on prototype to map over
	* will just copy over all functions from prototype
	- mixins
		- inherits from Mixin
		- $target will wrap an object : this.$target( obj )
		- definition with mixins property : { mixins : [] }
	- decorators
		- inherits from Decorator
		- override function, but provides $wrapped to reference original
		- $target will wrap an object : this.$target( obj )
		- maintains reference to original object through call
		- definition with decorators property : { decorators : [] }
	- plugins
		- inherits from Plugin
		- override function, but provides $wrapped to reference original
		- plugins are constructed with optional settings
		- $target will wrap an object : this.$target( obj )
		- reference inside the function is to the plugin, not the target
		- definition with plugins property : { plugins : [] }

- A system that lets you register for call backs, but doesn't fire right away
	- all values are queued up for 30 ms, and it only fires once every 30 ms at most
	- use vGraph image processing as example

- managing quarks
	- see what are being waited on
	- allow the fetching of any missing quarks

- extend the Date object to improve

- improve promise support
	- group : manages when all are completed, allows handling if one fails out of bunch
		* constructor decides if fault tolerant (default false)
		* success - all completed
		* failure - one failed
	- stack : manages firing events in order, if one fails, it stops
		* constructor decides if fault tolerant (default false)
		* success - all completed
		* failure - one failed
	- improved interface
		* watch( success, error ) : same as then, but doesn't change the output, returns the same promise

- Error handling